import networkx as nx
import numpy as np
import random
import matplotlib.pyplot as plt

def generate_random_graph(n, p):
    """
    Generate a random graph with n nodes using Erdős–Rényi model G(n, p).
    :param n: Number of nodes
    :param p: Probability of edge creation
    :return: A random graph G
    """
    G = nx.erdos_renyi_graph(n, p, directed=True)  # Generate a random directed graph
    return G

def random_walk_with_restart(G, start_node, alpha=0.15, steps=1000):
    """
    Perform a random walk with restart (RWR) on graph G.
    :param G: Input graph
    :param start_node: Starting node for the random walk
    :param alpha: Restart probability (default 0.15)
    :param steps: Number of steps to run the walk
    :return: A dictionary of visit frequencies for each node
    """
    visit_counts = {node: 0 for node in G.nodes()}  # Track visit counts
    current_node = start_node

    for _ in range(steps):
        visit_counts[current_node] += 1  # Count visit
        
        if random.random() < alpha:  # Restart condition
            current_node = start_node
        else:
            neighbors = list(G.neighbors(current_node))
            if neighbors:
                current_node = random.choice(neighbors)  # Move to a random neighbor

    # Normalize visit counts
    total_visits = sum(visit_counts.values())
    visit_probabilities = {node: count / total_visits for node, count in visit_counts.items()}
    
    return visit_probabilities

# Parameters
num_nodes = 10   # Number of nodes in the graph
edge_prob = 0.3  # Probability of edge formation
start_node = 0   # Start node for RWR
alpha = 0.15     # Restart probability
num_steps = 5000 # Number of random walk steps

# Generate a random directed graph
G = generate_random_graph(num_nodes, edge_prob)

# Run Random Walk with Restarts
rwr_results = random_walk_with_restart(G, start_node, alpha, num_steps)

# Print results
print("Random Walk with Restart probabilities:")
for node, prob in sorted(rwr_results.items()):
    print(f"Node {node}: {prob:.4f}")

# Draw the graph
plt.figure(figsize=(8, 6))
nx.draw(G, with_labels=True, node_color='lightblue', edge_color='gray', node_size=700)
plt.title("Randomly Generated Graph")
plt.show()
